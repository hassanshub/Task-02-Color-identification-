#Hassan Javaid 
#internship for IoT and Computer Vision 
#The Sparks Foundation 
#Task number 02 
#Color Identification

import cv2
import numpy as np
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans
from collections import Counter

def preprocess_image(image_path):
    # Load the image
    image = cv2.imread(r"C:\Users\hjava\Desktop\scanned docs\Picture.jpg")
    
    # Convert BGR to RGB
    image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
    
    # Resize the image for faster processing
    image = cv2.resize(image, (800, 600))
    
    # Flatten the image to a 2D array of pixels
    pixels = image.reshape(-1, 3)
    
    return pixels

def cluster_colors(pixels, num_clusters=10):
    # Apply KMeans clustering
    kmeans = KMeans(n_clusters=num_clusters, random_state=0)
    kmeans.fit(pixels)
    
    # Get the colors and labels
    colors = kmeans.cluster_centers_
    labels = kmeans.labels_
    
    # Count the number of pixels for each color
    label_counts = Counter(labels)
    
    # Sort colors by frequency
    sorted_colors = [colors[i] for i in label_counts.keys()]
    sorted_counts = [label_counts[i] for i in label_counts.keys()]
    
    return sorted_colors, sorted_counts

def plot_colors(colors, counts):
    # Convert colors to 8-bit integers
    colors = np.array(colors, dtype=int)
    
    # Plot the colors
    plt.figure(figsize=(10, 6))
    plt.pie(counts, labels=[f'Color {i+1}' for i in range(len(colors))],
            colors=np.array(colors) / 255, autopct='%1.1f%%')
    plt.title('Colors Identified in Image')
    plt.show()

# Path to your image
image_path = r"C:\Users\hjava\Desktop\scanned docs\Picture.jpg"

# Preprocess the image
pixels = preprocess_image(image_path)

# Cluster colors
num_clusters = 10  # Number of colors to identify
colors, counts = cluster_colors(pixels, num_clusters)

# Display the results
print(f'Identified Colors (RGB): {colors}')
print(f'Color Frequencies: {counts}')

# Plot the colors
plot_colors(colors, counts)
